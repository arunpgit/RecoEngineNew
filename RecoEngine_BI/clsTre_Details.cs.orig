using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Data;
using RecoEngine_DataLayer;

namespace RecoEngine_BI
{
    public class clsTre_Details
    {
        public DataTable fnTREtimeperiods(string strTableName)
        {
            try
            {
                DataTable dt;
                string strSQl = "select distinct to_char(YEAR) || '-' || to_char(WEEK) as timeperiod,year,week  from " + strTableName + "  where YEAR is not null  and WEEK is not null  order by year desc, week desc";
                if (Common.iDBType == (int)Enums.DBType.Oracle)
                    dt = ((OraDBManager)Common.dbMgr).ExecuteDataTable(CommandType.Text, strSQl);
                else
                {
                    dt = ((DBManager)Common.dbMgr).ExecuteDataTable(CommandType.Text, strSQl);
                }

                return dt;

            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public DataTable fnFillSegment(string strTabName)
        {
            try
            {
                DataTable dt;
                string strSql = "Select COLNAME from TRE_MAPPING where TABLENAME='" + strTabName + "' and type=" + ((int)Enums.ColType.Segment).ToString();
                if (Common.iDBType == (int)Enums.DBType.Oracle)
                    dt = ((OraDBManager)Common.dbMgr).ExecuteDataTable(CommandType.Text, strSql);
                else
                    dt = ((DBManager)Common.dbMgr).ExecuteDataTable(CommandType.Text, strSql);
                return dt;

            }
            catch (Exception ex)
            {
                throw ex;
            }
        }


        private string fnBuildQuery(string[] str)
        {
            try
            {
                string strQuery = "";

                for (int i = 0; i < str.Length; i++)
                {
                    if (strQuery != "")
                        strQuery += " OR ";
                    if (Common.iDBType == (int)Enums.DBType.Oracle)
                        strQuery += " to_char(year) || '-' || to_char(week) = ";
                    else if (Common.iDBType == (int)Enums.DBType.SQl)
                        strQuery += " to_char(year) + '-' + to_char(week) = ";
                    strQuery += "'";
                    strQuery += str[i].Trim();
                    strQuery += "'";
                }

                return strQuery;

            }
            catch (Exception ex)
            {

                throw ex;
            }
        }


        private string fnBuildTimePeriod(string[] str)
        {
            try
            {
                string strQuery = "";

                for (int i = 0; i < str.Length; i++)
                {
                    if (strQuery != "")
                        strQuery += " , ";

                    strQuery += str[i].Trim();
                }

                return strQuery;

            }
            catch (Exception ex)
            {

                throw ex;
            }
        }
        public void fnGetBaseData(string strTabName, string strGrower)
        {
            try
            {
                string strSql = "";


                string strSegmentString = "";
                string strKeyString = "";
                string strSegmentVString = "";
                string strKeyVString = "";
                string strKeyCString = "";
                string strETS_TRE_BASEString = "";
                string strETS_TRE_BASEVString = "";

                string strETS_TRE_BASE2String = "";
                string strETS_TRE_BASE2VString = "";

                string strETS_TRE_BASE3String = "";
                string strETS_TRE_BASE3VString = "";

                string str1 = "";
                string strV1 = "";

                DataTable dtTab = new DataTable();

                // strTabName = "TRE_DETAILS_NEW";
                strSql = "Select * from TRE_MAPPING where TABLENAME='" + strTabName + "'";
                if (Common.iDBType == (int)Enums.DBType.Oracle)
                    dtTab = ((OraDBManager)Common.dbMgr).ExecuteDataTable(CommandType.Text, strSql);
                else
                    dtTab = ((DBManager)Common.dbMgr).ExecuteDataTable(CommandType.Text, strSql);

                foreach (DataRow dr in dtTab.Rows)
                {

                    if (dr["type"].ToString() == ((int)Enums.ColType.Input).ToString())
                    {
                        str1 = "";
                        strV1 = "";

                        if (strETS_TRE_BASEString != "")
                            strETS_TRE_BASEString += ",";

                        if (strETS_TRE_BASE2String != "")
                            strETS_TRE_BASE2String += ",";

                        if (strETS_TRE_BASE3String != "")
                            strETS_TRE_BASE3String += ",";

                        if (strETS_TRE_BASEVString != "")
                            strETS_TRE_BASEVString += ",";

                        if (strETS_TRE_BASE2VString != "")
                            strETS_TRE_BASE2VString += ",";

                        if (strETS_TRE_BASE3VString != "")
                            strETS_TRE_BASE3VString += ",";

                        str1 = "A_" + dr[0].ToString() + ",B_" + dr[0].ToString() + ",X_" + dr[0].ToString() + ",D_" + dr[0].ToString();



                        strV1 = "A_" + dr[0].ToString() + ",B_" + dr[0].ToString() + ",X_" + dr[0].ToString() + ",";
                        strV1 += " Case When B_" + dr[0].ToString() + " > 0 Then ROUND((A_" + dr[0].ToString() + "/B_" + dr[0].ToString() + ")-1,3) Else 0 End ";


                        strETS_TRE_BASEString += str1;
                        strETS_TRE_BASEVString += strV1;

                        str1 += ",S_" + dr[0].ToString();
                        // need to pass 0.25 value dynamically
                        strV1 = " ,CASE WHEN B_" + dr[0].ToString() + " = 0  AND A_" + dr[0].ToString() + " = 0 Then 'Non User' ";
                        strV1 += "  WHEN B_" + dr[0].ToString() + " = 0  AND A_" + dr[0].ToString() + " > 0 Then 'New User' ";
                        strV1 += "  WHEN B_" + dr[0].ToString() + " > 0  AND D_" + dr[0].ToString() + " = -1 Then 'Stopper' ";
                        strV1 += "  WHEN D_" + dr[0].ToString() + " <= " + Convert.ToDecimal(strGrower) + " Then 'Dropper' ";
                        strV1 += "  WHEN D_" + dr[0].ToString() + " >= " + Convert.ToDecimal(strGrower) + "  Then 'Grower' ";
                        strV1 += "  ELSE 'Flat' End ";

                        strETS_TRE_BASE2String += str1;
                        strETS_TRE_BASE2VString += "A_" + dr[0].ToString() + ",B_" + dr[0].ToString() + ",X_" + dr[0].ToString() + ",D_" + dr[0].ToString() + strV1;

                        str1 += ",P_" + dr[0].ToString();

                        strV1 = ", CASE WHEN S_" + dr[0].ToString() + " = 'Non User' Then X_" + dr[0].ToString();
                        strV1 += "  WHEN S_" + dr[0].ToString() + " = 'Dropper' then abs(D_" + dr[0].ToString() + ")";
                        strV1 += "  WHEN S_" + dr[0].ToString() + "= 'Stopper' then B_" + dr[0].ToString() + "*" + Convert.ToDecimal(strGrower);
                        strV1 += "  WHEN S_" + dr[0].ToString() + "='Flat' then a_" + dr[0].ToString() + "*" + Convert.ToDecimal(strGrower);
                        strV1 += "  ELSE 0 End ";

                        strETS_TRE_BASE3String += str1;
                        strETS_TRE_BASE3VString += "A_" + dr[0].ToString() + ",B_" + dr[0].ToString() + ",X_" + dr[0].ToString() + ",D_" + dr[0].ToString() + ",S_" + dr[0].ToString() + strV1;



                    }
                    else if (dr["type"].ToString() == ((int)Enums.ColType.Segment).ToString())
                    {
                        if (strSegmentString != "")
                            strSegmentString += ",";

                        if (strSegmentVString != "")
                            strSegmentVString += ",";

                        strSegmentVString += "A." + dr[0].ToString();
                        strSegmentString += dr[0].ToString();
                    }
                    else if (dr["type"].ToString() == ((int)Enums.ColType.Key).ToString())
                    {
                        if (strKeyString != "")
                            strKeyString += ",";

                        if (strKeyVString != "")
                            strKeyVString += ",";

                        if (strKeyCString != "")
                            strKeyCString += ",";

                        strKeyVString += "A." + dr[0].ToString();
                        strKeyString += dr[0].ToString();

                        strKeyCString += "A." + dr[0].ToString() + "=" + "B." + dr[0].ToString();
                    }
                }


                strSql = "Delete from ETS_TRE_BASE2";
                if (Common.iDBType == (int)Enums.DBType.Oracle)
                {
                    ((OraDBManager)Common.dbMgr).ExecuteScalar(CommandType.Text, strSql);
                }
                else
                {
                    ((DBManager)Common.dbMgr).ExecuteScalar(CommandType.Text, strSql);
                }
                strSql = "Delete from ETS_TRE_BASE3";
                if (Common.iDBType == (int)Enums.DBType.Oracle)
                {
                    ((OraDBManager)Common.dbMgr).ExecuteScalar(CommandType.Text, strSql);
                }
                else
                {
                    ((DBManager)Common.dbMgr).ExecuteScalar(CommandType.Text, strSql);
                }

                string strInsertString = "Insert into ETS_TRE_BASE2(";

                if (strKeyString != "")
                    strInsertString += strKeyString + ",";

                if (strSegmentString != "")
                    strInsertString += strSegmentString + ",";

                if (strETS_TRE_BASE2String != "")
                    strInsertString += strETS_TRE_BASE2String;

                strInsertString += ") Select ";
                if (strKeyString != "")
                    strInsertString += strKeyString + ",";

                if (strSegmentString != "")
                    strInsertString += strSegmentString + ",";

                strInsertString += strETS_TRE_BASE2VString + " From ETS_TRE_BASE ";


                if (Common.iDBType == (int)Enums.DBType.Oracle)
                {
                    ((OraDBManager)Common.dbMgr).ExecuteScalar(CommandType.Text, strInsertString);
                }
                else
                {
                    ((DBManager)Common.dbMgr).ExecuteScalar(CommandType.Text, strInsertString);
                }


                strInsertString = "Insert into ETS_TRE_BASE3(";

                if (strKeyString != "")
                    strInsertString += strKeyString + ",";

                if (strSegmentString != "")
                    strInsertString += strSegmentString + ",";

                if (strETS_TRE_BASE3String != "")
                    strInsertString += strETS_TRE_BASE3String;

                strInsertString += ") Select ";
                if (strKeyString != "")
                    strInsertString += strKeyString + ",";

                if (strSegmentString != "")
                    strInsertString += strSegmentString + ",";

                strInsertString += strETS_TRE_BASE3VString + " From ETS_TRE_BASE2 ";

                if (Common.iDBType == (int)Enums.DBType.Oracle)
                {
                    ((OraDBManager)Common.dbMgr).ExecuteScalar(CommandType.Text, strInsertString);
                }
                else
                {
                    ((DBManager)Common.dbMgr).ExecuteScalar(CommandType.Text, strInsertString);
                }


            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        private void fnGetSegmentData(string strTabName, int iTIMEPERIOD, string strSegmentColumn, string strT2String, string[] strT2, bool isActiveChecked, ref int iCount, ref string strSegmentDataFeilds)
        {
            try
            {
                string strSql = "";

                string strInsertString = "Insert into ETS_TRE_X_SELL_PNTL(TIMEPERIOD,SegmentColName,CURRENTSEGMENT, ";

                string strInsertSString = "";
                string strInsertSValues = "";


                string strInsertValues = "";
                string strSegmentString = "";
                string strKeyString = "";
                string strSegmentVString = "";
                string strKeyVString = "";
                string strKeyCString = "";
                string strETS_TRE_BASEString = "";
                string strETS_TRE_BASEVString = "";

                string str1 = "";
                string strV1 = "";

                DataTable dtTab = new DataTable();

                // strTabName = "TRE_DETAILS_NEW";
                strSql = "Select * from TRE_MAPPING where TABLENAME='" + strTabName + "'";
                if (Common.iDBType == (int)Enums.DBType.Oracle)
                    dtTab = ((OraDBManager)Common.dbMgr).ExecuteDataTable(CommandType.Text, strSql);
                else
                    dtTab = ((DBManager)Common.dbMgr).ExecuteDataTable(CommandType.Text, strSql);

                foreach (DataRow dr in dtTab.Rows)
                {

                    if (dr["type"].ToString() == ((int)Enums.ColType.Input).ToString())
                    {
                        str1 = "";
                        strV1 = "";

                        if (strInsertSString != "")
                            strInsertSString += ",";



                        if (strInsertSValues != "")
                            strInsertSValues += ",";

                        if (strSegmentDataFeilds != "")
                            strSegmentDataFeilds += ",";

                        strInsertSString += "X_" + dr[0].ToString();

                        if (isActiveChecked)
                            strInsertSValues += "CASE WHEN ROUND(SUM(REPLACE(A_" + dr[0].ToString() + ",',','.')),2) > 0 THEN ROUND(SUM(REPLACE(A_" + dr[0].ToString() + ",',','.'))/SUM(CASE WHEN REPLACE(A_" + dr[0].ToString() + ",',','.') > 0 THEN 1 ELSE 0 END),2) ELSE 0 END ";
                        else
                            strInsertSValues += " ROUND(Avg(A_" + dr[0].ToString() + "),2)";


                        //strInsertSUserString += "X_" + dr[0].ToString() + "_USR," + "X_" + dr[0].ToString() ;

                        //strInsertSUserValues += " SUM(CASE WHEN REPLACE(A_" + dr[0].ToString() + ",',','.') > 0 THEN 1 ELSE 0 END),";
                        //strInsertSUserValues += " SUM(REPLACE(A_" + dr[0].ToString() + ",',','.')) ";










                        strSegmentDataFeilds += "X_" + dr[0].ToString() + " as " + dr[0].ToString();


                        if (strETS_TRE_BASEString != "")
                            strETS_TRE_BASEString += ",";


                        if (strETS_TRE_BASEVString != "")
                            strETS_TRE_BASEVString += ",";



                        str1 = "A_" + dr[0].ToString() + ",B_" + dr[0].ToString() + ",X_" + dr[0].ToString() + ",D_" + dr[0].ToString();



                        strV1 = "A_" + dr[0].ToString() + ",B_" + dr[0].ToString() + ",X_" + dr[0].ToString() + ",";
                        strV1 += " Case When B_" + dr[0].ToString() + " > 0 Then ROUND((A_" + dr[0].ToString() + "/B_" + dr[0].ToString() + ")-1,3) Else 0 End ";


                        strETS_TRE_BASEString += str1;
                        strETS_TRE_BASEVString += strV1;


                    }
                    else if (dr["type"].ToString() == ((int)Enums.ColType.Segment).ToString())
                    {
                        if (strSegmentString != "")
                            strSegmentString += ",";

                        if (strSegmentVString != "")
                            strSegmentVString += ",";

                        strSegmentVString += "A." + dr[0].ToString();
                        strSegmentString += dr[0].ToString();
                    }
                    else if (dr["type"].ToString() == ((int)Enums.ColType.Key).ToString())
                    {
                        if (strKeyString != "")
                            strKeyString += ",";

                        if (strKeyVString != "")
                            strKeyVString += ",";

                        if (strKeyCString != "")
                            strKeyCString += ",";

                        strKeyVString += "A." + dr[0].ToString();
                        strKeyString += dr[0].ToString();

                        strKeyCString += "A." + dr[0].ToString() + "=" + "B." + dr[0].ToString();
                    }
                }


                if (iCount == 0)
                {

                    strSql = "Delete from ETS_TRE_X_SELL_PNTL";
                    if (Common.iDBType == (int)Enums.DBType.Oracle)
                    {
                        ((OraDBManager)Common.dbMgr).ExecuteScalar(CommandType.Text, strSql);
                    }
                    else
                    {
                        ((DBManager)Common.dbMgr).ExecuteScalar(CommandType.Text, strSql);
                    }

                    strInsertValues = " Select '" + iTIMEPERIOD + "','" + strSegmentColumn + "'," + strSegmentColumn;

                    if (strInsertSString != "")
                        strInsertString += strInsertSString;


                    strInsertString += ")" + strInsertValues + "," + strInsertSValues + " From  ETS_ADM_WEEKLY_A  where TIMEPERIOD_ID=" + iTIMEPERIOD + " Group By " + strSegmentColumn;


                    if (Common.iDBType == (int)Enums.DBType.Oracle)
                    {
                        ((OraDBManager)Common.dbMgr).ExecuteScalar(CommandType.Text, strInsertString);
                    }
                    else
                    {
                        ((DBManager)Common.dbMgr).ExecuteScalar(CommandType.Text, strInsertString);
                    }



                    strSql = "Delete from ETS_TRE_BASE";
                    if (Common.iDBType == (int)Enums.DBType.Oracle)
                    {
                        ((OraDBManager)Common.dbMgr).ExecuteScalar(CommandType.Text, strSql);
                    }
                    else
                    {
                        ((DBManager)Common.dbMgr).ExecuteScalar(CommandType.Text, strSql);
                    }



                    strInsertString = "Insert into ETS_TRE_BASE(";
                    if (strKeyString != "")
                        strInsertString += strKeyString + ",";

                    if (strSegmentString != "")
                        strInsertString += strSegmentString + ",";

                    if (strETS_TRE_BASEString != "")
                        strInsertString += strETS_TRE_BASEString;

                    strInsertString += ") Select ";
                    if (strKeyVString != "")
                        strInsertString += strKeyVString + ",";

                    if (strSegmentVString != "")
                        strInsertString += strSegmentVString + ",";

                    strInsertString += strETS_TRE_BASEVString + " From ETS_ADM_WEEKLY_A A, ETS_ADM_WEEKLY_B B,ETS_TRE_X_SELL_PNTL C WHERE ";
                    strInsertString += strKeyCString + " (+) " + " And A." + strSegmentColumn + " = C.CURRENTSEGMENT ";
                    //where a.msisdn = b.msisdn (+) and nvl(b.A_decile,'Not Tagged') = c.a_current_segment;


                    if (Common.iDBType == (int)Enums.DBType.Oracle)
                    {
                        ((OraDBManager)Common.dbMgr).ExecuteScalar(CommandType.Text, strInsertString);
                    }
                    else
                    {
                        ((DBManager)Common.dbMgr).ExecuteScalar(CommandType.Text, strInsertString);
                    }



                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        private void fnGetSegmentData_old(string strTabName, int iTIMEPERIOD, string strSegmentColumn, string strT2String, string[] strT2, ref int iCount, ref string strSegmentDataFeilds)
        {
            try
            {
                string strSql = "";

                string strInsertString = "Insert into ETS_TRE_X_SELL_PNTL(TIMEPERIOD,SegmentColName,CURRENTSEGMENT, ";
                string strInsertSString = "";
                string strInsertSValues = "";

                string strInsertValues = "";


                string strETS_TRE_BASEString = "";
                string strETS_TRE_BASEVString = "";

                DataTable dtTab = new DataTable();

                // strTabName = "TRE_DETAILS_NEW";
                strSql = "Select * from TRE_MAPPING where TABLENAME='" + strTabName + "' and type  =  " + ((int)Enums.ColType.Input).ToString();
                if (Common.iDBType == (int)Enums.DBType.Oracle)
                    dtTab = ((OraDBManager)Common.dbMgr).ExecuteDataTable(CommandType.Text, strSql);
                else
                    dtTab = ((DBManager)Common.dbMgr).ExecuteDataTable(CommandType.Text, strSql);

                foreach (DataRow dr in dtTab.Rows)
                {

                    if (dr["type"].ToString() == ((int)Enums.ColType.Input).ToString())
                    {
                        if (strInsertSString != "")
                            strInsertSString += ",";

                        if (strInsertSValues != "")
                            strInsertSValues += ",";

                        if (strSegmentDataFeilds != "")
                            strSegmentDataFeilds += ",";

                        strInsertSString += "X_" + dr[0].ToString();
                        strInsertSValues += " Round(Avg(A_" + dr[0].ToString() + "),2)";

                        strSegmentDataFeilds += "X_" + dr[0].ToString() + " as " + dr[0].ToString();
                    }
                }


                if (iCount == 0)
                {
                    strInsertValues = " Select '" + iTIMEPERIOD + "','" + strSegmentColumn + "'," + strSegmentColumn;

                    if (strInsertSString != "")
                        strInsertString += strInsertSString;


                    strInsertString += ")" + strInsertValues + "," + strInsertSValues + " From  ETS_ADM_WEEKLY_A  where TIMEPERIOD_ID=" + iTIMEPERIOD + " Group By " + strSegmentColumn;


                    if (Common.iDBType == (int)Enums.DBType.Oracle)
                    {
                        ((OraDBManager)Common.dbMgr).ExecuteScalar(CommandType.Text, strInsertString);
                    }
                    else
                    {
                        ((DBManager)Common.dbMgr).ExecuteScalar(CommandType.Text, strInsertString);
                    }

                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }


        public void fnGetTimePeriodData_old(string strTabName, string[] strT1, string[] strT2, int iTimePeriodID, ref int iMaxId, ref string strT1Feilds, ref string strT2Feilds)
        {
            try
            {
                string strSql = "";

                string strInsertTString = "Insert into ETS_ADM_WEEKLY(Id,TIMEPERIOD_ID ";
                string strInsertT1String = "";
                string strUpdateTString = "Update ETS_ADM_WEEKLY Set  ";
                string strUpdateT2String = "";
                string strUpdateT2Values = "";
                string strKeyString = "";
                string strSegmentString = "";


                string strTimeString = "";
                string strInsertT1Values = "";

                string strInsertTValues = "";

                DataTable dtTab = new DataTable();

                // strTabName = "TRE_DETAILS_NEW";
                strSql = "Select * from TRE_MAPPING where TABLENAME='" + strTabName + "'";
                if (Common.iDBType == (int)Enums.DBType.Oracle)
                    dtTab = ((OraDBManager)Common.dbMgr).ExecuteDataTable(CommandType.Text, strSql);
                else
                    dtTab = ((DBManager)Common.dbMgr).ExecuteDataTable(CommandType.Text, strSql);

                foreach (DataRow dr in dtTab.Rows)
                {

                    if (dr["type"].ToString() != ((int)Enums.ColType.None).ToString())
                    {
                        if (dr["type"].ToString() == ((int)Enums.ColType.Key).ToString())
                        {
                            if (strKeyString != "")
                                strKeyString += ",";
                            strKeyString += dr[0].ToString();
                        }
                        else if (dr["type"].ToString() == ((int)Enums.ColType.Time).ToString())
                        {
                            if (strTimeString != "")
                                strTimeString += ",";
                            strTimeString += dr[0].ToString();
                        }
                        else if (dr["type"].ToString() == ((int)Enums.ColType.Segment).ToString())
                        {
                            if (strSegmentString != "")
                                strSegmentString += ",";

                            strSegmentString += dr[0].ToString();
                        }
                        else if (dr["type"].ToString() == ((int)Enums.ColType.Input).ToString())
                        {
                            if (strInsertT1String != "")
                                strInsertT1String += ",";

                            if (strUpdateT2String != "")
                                strUpdateT2String += ",";

                            if (strInsertT1Values != "")
                                strInsertT1Values += ",";

                            if (strUpdateT2Values != "")
                                strUpdateT2Values += ",";
                            if (strT1Feilds != "")
                                strT1Feilds += ",";

                            if (strT2Feilds != "")
                                strT2Feilds += ",";

                            strInsertT1String += "T1_" + dr[0].ToString();
                            strInsertT1Values += " Round(Avg(" + dr[0].ToString() + "),2)";


                            strT1Feilds += "T1_" + dr[0].ToString() + " as " + dr[0].ToString();
                            strT2Feilds += "T2_" + dr[0].ToString() + " as " + dr[0].ToString();

                            strUpdateT2String += "T2_" + dr[0].ToString();
                            strUpdateT2Values += " Round(Avg(" + dr[0].ToString() + "),2)";

                        }
                    }
                }


                if (iMaxId == 0)
                {

                    strSql = "Select NVL(MAX(ID), 0)+1 AS MAX_VAL from ETS_ADM_WEEKLY";
                    if (Common.iDBType == (int)Enums.DBType.Oracle)
                        iMaxId = int.Parse(((OraDBManager)Common.dbMgr).ExecuteScalar(CommandType.Text, strSql));
                    else
                        iMaxId = int.Parse(((DBManager)Common.dbMgr).ExecuteScalar(CommandType.Text, strSql));

                    strInsertTValues = " Select " + iMaxId + "," + iTimePeriodID;


                    if (strInsertT1String != "")
                        strInsertTString += "," + strInsertT1String;


                    strInsertTString += ")" + strInsertTValues + "," + strInsertT1Values + " From  " + strTabName + " where " + fnBuildQuery(strT1);




                    if (Common.iDBType == (int)Enums.DBType.Oracle)
                    {
                        ((OraDBManager)Common.dbMgr).ExecuteScalar(CommandType.Text, strInsertTString);
                    }
                    else
                    {
                        ((DBManager)Common.dbMgr).ExecuteScalar(CommandType.Text, strInsertTString);
                    }
                    strUpdateTString = "Update ETS_ADM_WEEKLY Set  ( ";
                    strUpdateTString += strUpdateT2String + " ) =( Select  " + strUpdateT2Values + " From " + strTabName + " where " + fnBuildQuery(strT2) + ") Where Id=" + iMaxId;
                    if (Common.iDBType == (int)Enums.DBType.Oracle)
                    {
                        ((OraDBManager)Common.dbMgr).ExecuteScalar(CommandType.Text, strUpdateTString);
                    }
                    else
                    {
                        ((DBManager)Common.dbMgr).ExecuteScalar(CommandType.Text, strUpdateTString);
                    }
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public void fnGetTimePeriodData(string strTabName, string[] strT1, string[] strT2, int iTimePeriodID, ref int iMaxId, ref string strT1Feilds, ref string strT2Feilds)
        {
            try
            {
                string strSql = "";

                string strKeyString = "";
                string strKeyVString = "";
                string strSegmentString = "";

                string strInsertAString = "";
                string strInsertBString = "";
                string strUpdateAVString = "";
                string strInsertAVString = "";
                string strInsertBVString = "";

                string strTimeString = "";


                string strInsertValues = "";


                DataTable dtTab = new DataTable();

                // strTabName = "TRE_DETAILS_NEW";
                strSql = "Select * from TRE_MAPPING where TABLENAME='" + strTabName + "'";
                if (Common.iDBType == (int)Enums.DBType.Oracle)
                    dtTab = ((OraDBManager)Common.dbMgr).ExecuteDataTable(CommandType.Text, strSql);
                else
                    dtTab = ((DBManager)Common.dbMgr).ExecuteDataTable(CommandType.Text, strSql);

                foreach (DataRow dr in dtTab.Rows)
                {

                    if (dr["type"].ToString() != ((int)Enums.ColType.None).ToString())
                    {
                        if (dr["type"].ToString() == ((int)Enums.ColType.Key).ToString())
                        {
                            if (strKeyString != "")
                                strKeyString += ",";
                            strKeyString += dr[0].ToString();
                            strKeyVString = "A." + dr[0].ToString() + "= B." + dr[0].ToString();
                        }
                        else if (dr["type"].ToString() == ((int)Enums.ColType.Time).ToString())
                        {
                            if (strTimeString != "")
                                strTimeString += ",";
                            strTimeString += dr[0].ToString();
                        }
                        else if (dr["type"].ToString() == ((int)Enums.ColType.Segment).ToString())
                        {
                            if (strSegmentString != "")
                                strSegmentString += ",";

                            strSegmentString += dr[0].ToString();
                        }
                        else if (dr["type"].ToString() == ((int)Enums.ColType.Input).ToString())
                        {
                            if (strT1Feilds != "")
                                strT1Feilds += ",";

                            if (strT2Feilds != "")
                                strT2Feilds += ",";

                            if (strInsertAString != "")
                                strInsertAString += ",";

                            if (strInsertAVString != "")
                                strInsertAVString += ",";


                            if (strInsertBString != "")
                                strInsertBString += ",";

                            if (strInsertBVString != "")
                                strInsertBVString += ",";

                            if (strUpdateAVString != "")
                                strUpdateAVString += ",";

                            strInsertAString += "A_" + dr[0].ToString();
                            strInsertAVString += " Round(Avg(" + dr[0].ToString() + "),2)";

                            strInsertBString += "B_" + dr[0].ToString();
                            strInsertBVString += " Round(Avg(" + dr[0].ToString() + "),2)";

                            strT1Feilds += "Round(Avg(A_" + dr[0].ToString() + "),2) as " + dr[0].ToString();
                            strT2Feilds += "Round(Avg(B_" + dr[0].ToString() + "),2) as " + dr[0].ToString();


                        }
                    }
                }


                if (iMaxId == 0)
                {

                    strInsertValues = " Select  " + iTimePeriodID;
                    string strKeySegmentString = "";
                    if (strKeyString != "")
                    {
                        strKeySegmentString += strKeyString;
                        //strInsertValues += "," + strKeyString;
                        //strInsertATable += "," + strKeyString;
                        //strInsertBTable += "," + strKeyString;
                    }

                    if (strSegmentString != "")
                    {
                        if (strKeySegmentString != "")
                            strKeySegmentString += "," + strSegmentString;
                    }
                    if (strKeySegmentString != "")
                        strInsertValues += "," + strKeySegmentString;


                    strSql = "Delete From ETS_ADM_WEEKLY_A";
                    if (Common.iDBType == (int)Enums.DBType.Oracle)
                    {
                        ((OraDBManager)Common.dbMgr).ExecuteScalar(CommandType.Text, strSql);
                    }
                    else
                    {
                        ((DBManager)Common.dbMgr).ExecuteScalar(CommandType.Text, strSql);
                    }

                    strSql = "Delete From ETS_ADM_WEEKLY_B";
                    if (Common.iDBType == (int)Enums.DBType.Oracle)
                    {
                        ((OraDBManager)Common.dbMgr).ExecuteScalar(CommandType.Text, strSql);
                    }
                    else
                    {
                        ((DBManager)Common.dbMgr).ExecuteScalar(CommandType.Text, strSql);
                    }

                    string strInsertATable = "Insert into ETS_ADM_WEEKLY_A(TIMEPERIOD_ID ";

                    strInsertATable += "," + strKeySegmentString + "," + strInsertAString + ")" + strInsertValues + "," + strInsertAVString + " From  " + strTabName;
                    strInsertATable += " where " + fnBuildQuery(strT2) + " Group by " + strKeySegmentString;

                    if (Common.iDBType == (int)Enums.DBType.Oracle)
                    {
                        ((OraDBManager)Common.dbMgr).ExecuteScalar(CommandType.Text, strInsertATable);
                    }
                    else
                    {
                        ((DBManager)Common.dbMgr).ExecuteScalar(CommandType.Text, strInsertATable);
                    }

                    string strInsertBTable = "Insert into ETS_ADM_WEEKLY_B(TIMEPERIOD_ID ";

                    strInsertValues = " Select  " + iTimePeriodID;
                    if (strKeyString != "")
                    {
                        strInsertValues += "," + strKeyString;
                        strInsertBTable += "," + strKeyString;
                    }

                    strInsertBTable += "," + strInsertBString + ")" + strInsertValues + "," + strInsertBVString + " From  " + strTabName;
                    strInsertBTable += " where " + fnBuildQuery(strT1) + " Group by " + strKeyString;

                    if (Common.iDBType == (int)Enums.DBType.Oracle)
                    {
                        ((OraDBManager)Common.dbMgr).ExecuteScalar(CommandType.Text, strInsertBTable);
                    }
                    else
                    {
                        ((DBManager)Common.dbMgr).ExecuteScalar(CommandType.Text, strInsertBTable);
                    }
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public DataTable fnGetOpportunityDetails()
        {
            try
            {
                DataTable dt = new DataTable();

                string strSql = "Select * from TRE_OPPORTUNITY";
                if (Common.iDBType == (int)Enums.DBType.Oracle)
                    dt = ((OraDBManager)Common.dbMgr).ExecuteDataTable(CommandType.Text, strSql);
                else if (Common.iDBType == (int)Enums.DBType.SQl)
                    dt = ((DBManager)Common.dbMgr).ExecuteDataTable(CommandType.Text, strSql);


                return dt;

            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public DataTable fnGetSegmentData(string strTabName, string[] strT2, string strSegmentColName, bool isActiveChecked)
        {
            try
            {
                DataTable dt = new DataTable();
                int iCount = 0;
                string strT2String = fnBuildTimePeriod(strT2);
                string strSegmentDataFeilds = "";
                int iTimePeriodID = 0;


                string strSql = "Select TIMEPERIOD_ID from TRE_TIMEPERIOD WHERE T2='" + strT2String + "'";
                if (Common.iDBType == (int)Enums.DBType.Oracle)
                    dt = ((OraDBManager)Common.dbMgr).ExecuteDataTable(CommandType.Text, strSql);
                else if (Common.iDBType == (int)Enums.DBType.SQl)
                    dt = ((DBManager)Common.dbMgr).ExecuteDataTable(CommandType.Text, strSql);


                if (dt.Rows.Count > 0)
                {
                    iTimePeriodID = int.Parse(dt.Rows[dt.Rows.Count - 1][0].ToString());
                }


                strSql = "Select count(1) as x from ETS_TRE_X_SELL_PNTL WHERE TIMEPERIOD='" + iTimePeriodID + "' AND SEGMENTCOLNAME ='" + strSegmentColName + "'";

                if (Common.iDBType == (int)Enums.DBType.Oracle)
                    iCount = int.Parse(((OraDBManager)Common.dbMgr).ExecuteScalar(CommandType.Text, strSql));
                else if (Common.iDBType == (int)Enums.DBType.SQl)
                    iCount = int.Parse(((OraDBManager)Common.dbMgr).ExecuteScalar(CommandType.Text, strSql));


                // fnGetSegmentData(string strTabName, string strSegmentColumn,string strT2String, string[] strT2, ref int iMaxId, ref string strSegmentDataFeilds)
                fnGetSegmentData(strTabName, iTimePeriodID, strSegmentColName, strT2String, strT2, isActiveChecked, ref iCount, ref strSegmentDataFeilds);






                strSql = " Select CURRENTSEGMENT ," + strSegmentDataFeilds + " from ETS_TRE_X_SELL_PNTL where  TIMEPERIOD = '" + iTimePeriodID + "' AND SEGMENTCOLNAME ='" + strSegmentColName + "' order by CURRENTSEGMENT";


                if (Common.iDBType == (int)Enums.DBType.Oracle)
                    dt = ((OraDBManager)Common.dbMgr).ExecuteDataTable(CommandType.Text, strSql);
                else if (Common.iDBType == (int)Enums.DBType.SQl)
                    dt = ((DBManager)Common.dbMgr).ExecuteDataTable(CommandType.Text, strSql);


                return dt;

            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        private void fnInsertBaseData(string strTabName, int iTimePeriodID, string strSegmentColName)
        {
            try
            {

            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public DataTable fnTREtimePeriodData(string[] strT1, string[] strT2, string strTableName)
        {
            try
            {
                DataTable dt = new DataTable();
                int iTimePeriodID = 0;

                string strT1Feilds = "";
                string strT2Feilds = "";
                string strT1String = fnBuildTimePeriod(strT1);
                string strT2String = fnBuildTimePeriod(strT2);

                string strSql = "Select TIMEPERIOD_ID from TRE_TIMEPERIOD WHERE T1='" + strT1String + "' And T2='" + strT2String + "'";
                if (Common.iDBType == (int)Enums.DBType.Oracle)
                    dt = ((OraDBManager)Common.dbMgr).ExecuteDataTable(CommandType.Text, strSql);
                else if (Common.iDBType == (int)Enums.DBType.SQl)
                    dt = ((DBManager)Common.dbMgr).ExecuteDataTable(CommandType.Text, strSql);


                if (dt.Rows.Count > 0)
                {
                    iTimePeriodID = int.Parse(dt.Rows[dt.Rows.Count - 1][0].ToString());
                }
                else
                {
                    strSql = "insert into TRE_TIMEPERIOD (T1,T2) Values ('" + strT1String + "','" + strT2String + "')";

                    if (Common.iDBType == (int)Enums.DBType.Oracle)
                        ((OraDBManager)Common.dbMgr).ExecuteScalar(CommandType.Text, strSql);
                    else
                        ((DBManager)Common.dbMgr).ExecuteScalar(CommandType.Text, strSql);

                    strSql = "Select NVL(MAX(TIMEPERIOD_ID), 0) AS TIMEPERIOD_ID from TRE_TIMEPERIOD";
                    if (Common.iDBType == (int)Enums.DBType.Oracle)
                        iTimePeriodID = int.Parse(((OraDBManager)Common.dbMgr).ExecuteScalar(CommandType.Text, strSql));
                    else
                        iTimePeriodID = int.Parse(((DBManager)Common.dbMgr).ExecuteScalar(CommandType.Text, strSql));
                }


                strSql = "Select * from ETS_ADM_WEEKLY_A where TIMEPERIOD_ID=" + iTimePeriodID;

                if (Common.iDBType == (int)Enums.DBType.Oracle)
                    dt = ((OraDBManager)Common.dbMgr).ExecuteDataTable(CommandType.Text, strSql);
                else if (Common.iDBType == (int)Enums.DBType.SQl)
                    dt = ((DBManager)Common.dbMgr).ExecuteDataTable(CommandType.Text, strSql);

                int iMaxId = 0;
                if (dt.Rows.Count > 0)
                {
                    iMaxId = int.Parse(dt.Rows[0]["TIMEPERIOD_ID"].ToString());
                }

                fnGetTimePeriodData(strTableName, strT1, strT2, iTimePeriodID, ref iMaxId, ref strT1Feilds, ref strT2Feilds);


                strSql = " Select 'T1' as Period , " + strT1Feilds + " from ETS_ADM_WEEKLY_A where  TIMEPERIOD_ID = " + iTimePeriodID;
                strSql += " Union ";
                strSql += " Select 'T2' as Period , " + strT2Feilds + " from ETS_ADM_WEEKLY_B where TIMEPERIOD_ID = " + iTimePeriodID;


                if (Common.iDBType == (int)Enums.DBType.Oracle)
                    dt = ((OraDBManager)Common.dbMgr).ExecuteDataTable(CommandType.Text, strSql);
                else if (Common.iDBType == (int)Enums.DBType.SQl)
                    dt = ((DBManager)Common.dbMgr).ExecuteDataTable(CommandType.Text, strSql);


                return dt;

            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public void fnSaveOPPBreakDownStatus(int iOPPId, decimal dCtFlat, decimal dCtDropper, decimal dCtStoppeer, decimal dCtGrower, decimal dCtNonUser, decimal dCtNewUser,
            decimal dCFlat, decimal dCDropper, decimal dCStoppeer, decimal dCGrower, decimal dCNonUser, decimal dCNewUser,
            decimal dAVGFlat, decimal dAVGDropper, decimal dAVGStoppeer, decimal dAVGGrower, decimal dAVGNonUser, decimal dAVGNewUser, string[] strT1, string[] strT2, bool bIsInsert)
        {
            string sT1 = fnBuildTimePeriod(strT1);
            string sT2 = fnBuildTimePeriod(strT2);
            try
            {
                string strSql = "";
                if (bIsInsert)
                {
                    strSql = "Insert into STATUS_BREAKDOWN (OPPORTUNITY_ID,FLAT_CUTOFF,DROPPERS_CUTOFF,STOPPERS_CUTOFF,GROWERS_CUTOFF,NONUSERS_CUTOFF,NEWUSERS_CUTOFF,";
                    strSql += " FLAT_COUNT,DROPPERS_COUNT,STOPPERS_COUNT,GROWERS_COUNT,NONUSERS_COUNT,NEWUSERS_COUNT,FLAT_AVG,DROPPERS_AVG,STOPPERS_AVG,";
                    strSql += " GROWERS_AVG,NONUSERS_AVG,NEWUSERS_AVG,T1,T2) values (" + iOPPId + ",0 ," + dCtDropper + "," + dCtStoppeer + "," + dCtGrower + ",";
                    strSql += dCtNonUser + "," + dCtNewUser + "," + dCFlat + "," + dCDropper + "," + dCStoppeer + "," + dCGrower + "," + dCNonUser + "," + dCNewUser + ",";
                    strSql += dAVGFlat + "," + dAVGDropper + "," + dAVGStoppeer + "," + dAVGGrower + "," + dAVGNonUser + "," + dAVGNewUser + ",'" + sT1 + "','" + sT2 + "')";
                }
                else
                {
                    strSql = "Update STATUS_BREAKDOWN set FLAT_CUTOFF=0,DROPPERS_CUTOFF=" + dCtDropper + ",STOPPERS_CUTOFF=" + dCtStoppeer + ",";
                    strSql += " GROWERS_CUTOFF=" + dCtGrower + ",NONUSERS_CUTOFF=" + dCtNonUser + ",NEWUSERS_CUTOFF=" + dCtNewUser + ",";
                    strSql += " FLAT_COUNT=" + dCFlat + ",DROPPERS_COUNT=" + dCDropper + ",STOPPERS_COUNT=" + dCStoppeer + ",GROWERS_COUNT=" + dCGrower + ",NONUSERS_COUNT=" + dCNonUser + ",NEWUSERS_COUNT=" + dCNewUser + ",";
                    strSql += " FLAT_AVG=" + dAVGFlat + ",DROPPERS_AVG=" + dAVGDropper + ",STOPPERS_AVG=" + dAVGStoppeer + ",GROWERS_AVG=" + dAVGGrower + ",NONUSERS_AVG=" + dAVGNonUser + ",NEWUSERS_AVG=" + dAVGNewUser + ",";
                    strSql += " T1='" + sT1 + "',T2='" + sT2 + "' where OPPORTUNITY_ID=" + iOPPId;
                }

                if (Common.iDBType == (int)Enums.DBType.Oracle)
                    ((OraDBManager)Common.dbMgr).ExecuteNonQuery(CommandType.Text, strSql);
                else if (Common.iDBType == (int)Enums.DBType.SQl)
                    ((DBManager)Common.dbMgr).ExecuteNonQuery(CommandType.Text, strSql);

            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public DataTable fnGetTREThreShold(string[] strT1, string[] strT2, string strOppName, string strDropper, string strGrower, string strStopper, int iOpportunityId, string strTabName)
        {
            try
            {
                DataTable dt = new DataTable();


                //string strSql = " Update TRE_OPPORTUNITY A Set " + strOppName.ToUpper() + "_STATUS=";
                //strSql += " (Select " + strOppName.ToUpper() + "_DELTA from TRE_OPPORTUNITY B where A.CUSTOMER=B.CUSTOMER)";
                //strSql += " where Exists (select 1 from TRE_OPPORTUNITY O , TRE_OPPORTUNITY T where O.CUSTOMER=T.CUSTOMER AND O.CUSTOMER=A.CUSTOMER )";
                //((OraDBManager)Common.dbMgr).ExecuteNonQuery(CommandType.Text, strSql);
                string strSql = "Select * from OPPORTUNITY where OPPORTUNITY_ID = " + iOpportunityId;
                if (Common.iDBType == (int)Enums.DBType.Oracle)
                    dt = ((OraDBManager)Common.dbMgr).ExecuteDataTable(CommandType.Text, strSql);
                else
                    dt = ((DBManager)Common.dbMgr).ExecuteDataTable(CommandType.Text, strSql);

                string strFormula = "";

                if (dt.Rows.Count > 0)
                {
                    strFormula = dt.Rows[0]["FORMULA"].ToString();
                }


                strSql = "Select NVL(A.CUSTOMER,B.CUSTOMER) CUSTOMER, A.T1, B.T2,Case When T1=0 then 0 Else Round(T2/T1-1,2) End DELTA,";
                strSql += " Case When A.T1+B.T2 =0 Then 'NON_USER' ";
                strSql += " When A.T1=0 And B.T2>0 Then 'NEW_USER' ";
                strSql += " When Case When T1=0 then 0 Else Round(T2/T1-1,2) End < " + Convert.ToDecimal(strStopper) + " Then 'STOPPER' ";
                strSql += " When Case When T1=0 then 0 Else Round(T2/T1-1,2) End < " + Convert.ToDecimal(strDropper) + " Then 'DROPPER' ";
                strSql += " When Case When T1=0 then 0 Else Round(T2/T1-1,2) End >  " + Convert.ToDecimal(strGrower) + " Then 'GROWER' ";
                strSql += " ELSE 'FLAT' END as Status From";
                strSql += "(Select CUSTOMER, round(avg(" + strFormula.ToUpper() + "),2) T1 from " + strTabName;
                strSql += " where " + fnBuildQuery(strT1) + "  group by CUSTOMER) A ";
                strSql += " Left join (Select CUSTOMER, round(avg(" + strFormula.ToUpper() + "),2) T2 from  " + strTabName + " where  " + fnBuildQuery(strT2) + " group by CUSTOMER) B ";
                strSql += " On A.CUSTOMER=B.CUSTOMER";




                if (Common.iDBType == (int)Enums.DBType.Oracle)
                {

                    dt = ((OraDBManager)Common.dbMgr).ExecuteDataTable(CommandType.Text, strSql);
                }
                else if (Common.iDBType == (int)Enums.DBType.SQl)
                {
                    dt = ((DBManager)Common.dbMgr).ExecuteDataTable(CommandType.Text, strSql);
                }

                return dt;

            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public bool fnSaveTREThreShold(string[] strT1, string[] strT2, string strOppName, string strDropper, string strGrower, string strStopper, int iOpportunityId, string strTableName)
        {
            try
            {
                DataTable dtSource = new DataTable();
                string strSql = "Select * from OPPORTUNITY where OPPORTUNITY_ID = " + iOpportunityId;
                if (Common.iDBType == (int)Enums.DBType.Oracle)
                    dtSource = ((OraDBManager)Common.dbMgr).ExecuteDataTable(CommandType.Text, strSql);
                else
                    dtSource = ((DBManager)Common.dbMgr).ExecuteDataTable(CommandType.Text, strSql);

                string strFormula = "";

                if (dtSource.Rows.Count > 0)
                {
                    strFormula = dtSource.Rows[0]["FORMULA"].ToString();



                    int iCount = 0;
                    strSql = "Select * from TRE_MAPPING where TYPE=" + ((int)Enums.ColType.Key).ToString() + " OR TYPE=" + ((int)Enums.ColType.Time).ToString();
                    if (Common.iDBType == (int)Enums.DBType.Oracle)
                        dtSource = ((OraDBManager)Common.dbMgr).ExecuteDataTable(CommandType.Text, strSql);
                    else
                        dtSource = ((DBManager)Common.dbMgr).ExecuteDataTable(CommandType.Text, strSql);

                    if (dtSource.Rows.Count > 0)
                    {

                        string strColName = "";
                        string strUpdateString = "";
                        string strUpdateMString = "";
                        string strBT1 = Common.fnBuildQuery(strT1);
                        string strBT2 = Common.fnBuildQuery(strT2);
                        string strKeyString = "";
                        string strKColName = "";
                        string strKACol = "";

                        for (int i = 0; i < dtSource.Rows.Count; i++)
                        {
                            if (strColName != "")
                            {
                                strColName += ",";
                                strUpdateString += " And ";
                                strUpdateMString += " And ";
                            }

                            if (dtSource.Rows[i]["TYPE"].ToString() == ((int)Enums.ColType.Key).ToString())
                            {
                                if (strKeyString != "")
                                    strKeyString += " AND ";

                                if (strKColName != "")
                                    strKColName += ",";

                                if (strKACol != "")
                                    strKACol += ",";

                                strKeyString += "A." + dtSource.Rows[i]["COLNAME"].ToString() + "=B." + dtSource.Rows[i]["COLNAME"].ToString();

                                strKACol += "A." + dtSource.Rows[i]["COLNAME"].ToString();
                                strKColName += dtSource.Rows[i]["COLNAME"].ToString();

                            }

                            strColName += dtSource.Rows[i]["COLNAME"].ToString();
                            strUpdateString += "A." + dtSource.Rows[i]["COLNAME"].ToString() + "=B." + dtSource.Rows[i]["COLNAME"].ToString();

                            strUpdateMString += "OPT." + dtSource.Rows[i]["COLNAME"].ToString() + "=TDN." + dtSource.Rows[i]["COLNAME"].ToString();
                            strUpdateMString += " AND OPT." + dtSource.Rows[i]["COLNAME"].ToString() + "=A." + dtSource.Rows[i]["COLNAME"].ToString();
                        }


                        strSql = "Select count(1) from  TRE_OPPORTUNITY ";
                        iCount = int.Parse(((OraDBManager)Common.dbMgr).ExecuteScalar(CommandType.Text, strSql));
                        if (iCount == 0)
                        {
                            strSql = " INSERT INTO TRE_OPPORTUNITY(CUSTOMER," + strOppName.ToUpper() + "_DELTA," + strOppName.ToUpper() + "_STATUS)";
                            strSql += " select A.CUSTOMER, Case When T1=0 then 0 Else Round(T2/T1-1,2) END, ";
                            strSql += " Case When A.T1+B.T2 =0 Then 'NON_USER' ";
                            strSql += " When A.T1=0 And B.T2>0 Then 'NEW_USER' ";
                            strSql += " When Case When T1=0 then 0 Else Round(T2/T1-1,2) End < " + Convert.ToDecimal(strStopper) + " Then 'STOPPER' ";
                            strSql += " When Case When T1=0 then 0 Else Round(T2/T1-1,2) End < " + Convert.ToDecimal(strDropper) + " Then 'DROPPER' ";
                            strSql += " When Case When T1=0 then 0 Else Round(T2/T1-1,2) End >  " + Convert.ToDecimal(strGrower) + " Then 'GROWER' ";
                            strSql += " ELSE 'FLAT' END as Status From  (Select CUSTOMER, round(avg(" + strFormula.ToUpper() + "),2) T1 from " + strTableName;
                            strSql += " where " + strBT1 + "  group by CUSTOMER) A ";
                            strSql += " Left join (Select CUSTOMER, round(avg(" + strFormula.ToUpper() + "),2) T2 from " + strTableName + " where  " + strBT2 + " group by CUSTOMER) B ";
                            strSql += " On " + strKeyString;


                            if (Common.iDBType == (int)Enums.DBType.Oracle)
                                ((OraDBManager)Common.dbMgr).ExecuteNonQuery(CommandType.Text, strSql);
                            else
                                ((DBManager)Common.dbMgr).ExecuteNonQuery(CommandType.Text, strSql);
                        }
                        else
                        {
                            if (Common.iDBType == (int)Enums.DBType.Oracle)
                            {

                                strSql = " Delete From TRE_OPP_TEMP";
                                ((OraDBManager)Common.dbMgr).ExecuteNonQuery(CommandType.Text, strSql);


                                strSql = " INSERT INTO TRE_OPP_TEMP(CUSTOMER, DELTA,STATUS)";
                                strSql += " select A.CUSTOMER, Case When T1=0 then 0 Else Round(T2/T1-1,2) END, ";
                                strSql += " Case When A.T1+B.T2 =0 Then 'NON_USER' ";
                                strSql += " When A.T1=0 And B.T2>0 Then 'NEW_USER' ";
                                strSql += " When Case When T1=0 then 0 Else Round(T2/T1-1,2) End < " + Convert.ToDecimal(strStopper) + " Then 'STOPPER' ";
                                strSql += " When Case When T1=0 then 0 Else Round(T2/T1-1,2) End < " + Convert.ToDecimal(strDropper) + " Then 'DROPPER' ";
                                strSql += " When Case When T1=0 then 0 Else Round(T2/T1-1,2) End >  " + Convert.ToDecimal(strGrower) + " Then 'GROWER' ";
                                strSql += " ELSE 'FLAT' END as Status From  (Select CUSTOMER, round(avg(" + strFormula.ToUpper() + "),2) T1 from " + strTableName;
                                strSql += " where " + strBT1 + "  group by CUSTOMER) A ";
                                strSql += " Left join (Select CUSTOMER, round(avg(" + strFormula.ToUpper() + "),2) T2 from " + strTableName + " where  " + strBT2 + " group by CUSTOMER) B ";
                                strSql += " On " + strKeyString;

                                ((OraDBManager)Common.dbMgr).ExecuteNonQuery(CommandType.Text, strSql);



                                strSql = " Update TRE_OPPORTUNITY A Set (" + strOppName.ToUpper() + "_DELTA," + strOppName.ToUpper() + "_STATUS)=";
                                strSql += " (Select DELTA,STATUS from TRE_OPP_TEMP B where A.CUSTOMER=B.CUSTOMER)";
                                strSql += " where Exists (select 1 from TRE_OPPORTUNITY O , TRE_OPP_TEMP T where O.CUSTOMER=T.CUSTOMER AND O.CUSTOMER=A.CUSTOMER )";
                                ((OraDBManager)Common.dbMgr).ExecuteNonQuery(CommandType.Text, strSql);



                            }
                            else
                            {
                                //strSql = " Update TRE_OPPORTUNITY Set (" + strOppName + ")=";
                                //strSql += " (Select " + strFormula.Replace("'", "''") + " from " + strTableName + " where " + strUpdateString + ")";
                                //((DBManager)Common.dbMgr).ExecuteNonQuery(CommandType.Text, strSql);
                            }
                        }



                    }
                }
                return true;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }


        public bool fnSaveOPPPotential(string strOppName, int iOpportunityId, string strTableName, string strFormula)
        {
            try
            {
                DataTable dtSource = new DataTable();
                string strSql = "Update OPPORTUNITY Set PTNL_FORMULA='" + strFormula + "' where OPPORTUNITY_ID = " + iOpportunityId;
                if (Common.iDBType == (int)Enums.DBType.Oracle)
                    ((OraDBManager)Common.dbMgr).ExecuteNonQuery(CommandType.Text, strSql);
                else
                    ((DBManager)Common.dbMgr).ExecuteNonQuery(CommandType.Text, strSql);


                if (Common.iDBType == (int)Enums.DBType.Oracle)
                {

                    strSql = " Update TRE_OPPORTUNITY A Set " + strOppName.ToUpper() + "_PNTL=";
                    strSql += " (Select " + strFormula + " from ETS_TRE_BASE2 B where A.CUSTOMER=B.CUSTOMER)";
                    strSql += " where Exists (select 1 from TRE_OPPORTUNITY O , ETS_TRE_BASE2 T where O.CUSTOMER=T.CUSTOMER AND O.CUSTOMER=A.CUSTOMER )";
                    ((OraDBManager)Common.dbMgr).ExecuteNonQuery(CommandType.Text, strSql);
                }
                else
                {
                    //strSql = " Update TRE_OPPORTUNITY Set (" + strOppName + ")=";
                    //strSql += " (Select " + strFormula.Replace("'", "''") + " from " + strTableName + " where " + strUpdateString + ")";
                    //((DBManager)Common.dbMgr).ExecuteNonQuery(CommandType.Text, strSql);
                }
                return true;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public DataTable fnGetOppBreakDowndetails(int iOpportunityId)
        {
            try
            {
                DataTable dt = new DataTable();

                string strSQL = "Select * from STATUS_BREAKDOWN where OPPORTUNITY_ID=" + iOpportunityId;

                dt = ((OraDBManager)Common.dbMgr).ExecuteDataTable(CommandType.Text, strSQL);

                return dt;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
    }
}
